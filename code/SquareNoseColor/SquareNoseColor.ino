// SQUARE NOSE COLOR by Juice Lizard on Gamebuino Meta

#include <Gamebuino-Meta.h>

#define GAME_LOOP_NUMBERS_X 31
#define BIRD_Y 2
#define BUG_Y 33

const uint8_t SquareN_seColorData[] = {80, 64, 1, 0, 1, 0x0E, 1, 0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x75, 0x55,0x55, 0x55,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x75,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x75, 0x55,0x55, 0x55,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x75,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x57, 0x77,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x57, 0x77,0x75, 0x57,0x75, 0x55,0x57, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x55,0x57, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x77,0x77, 0x77,0x75, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x65, 0x55,0x57, 0x77,0x77, 0x75,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x57, 0x75,0x55, 0x57,0x75, 0x57,0x75, 0x57,0x75, 0x55,0x57, 0x77,0x77, 0x77,0x75, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x66, 0x65,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x06,0x66, 0x65,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x56,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x66,0x66, 0x66,0x66, 0x65,0x57, 0x75,0x55, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x56, 0x66,0x66, 0x66,0x66, 0x66,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x66,0x66, 0x66,0x66, 0x65,0x57, 0x75,0x55, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x56, 0x66,0x66, 0x66,0x66, 0x66,0x60, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x77,0x75, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x75,0x55, 0x55,0x55, 0x57,0x77, 0x77,0x75, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x77,0x75, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x75,0x55, 0x55,0x55, 0x57,0x77, 0x77,0x75, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x75,0x57, 0x77,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x75, 0x55,0x55, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x75,0x57, 0x77,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x57, 0x77,0x77, 0x77,0x75, 0x57,0x75, 0x55,0x55, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x75,0x55, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x55, 0x57,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x57, 0x75,0x55, 0x57,0x75, 0x5e,0xee, 0xee,0xee, 0xe5,0x55, 0x57,0x77, 0x77,0x75, 0x57,0x77, 0x77,0x77, 0x75,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x65,0x55, 0x55,0x88, 0x88,0x85, 0x55,0x55, 0x55,0x58, 0x85,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x56, 0x60,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x66,0x66, 0x88,0x88, 0x88,0x88, 0x66,0x66, 0x66,0x88, 0x88,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x66, 0x66,0x68, 0x88,0x88, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x06, 0x66,0x68, 0x88,0x88, 0x88,0x88, 0x86,0x66, 0x66,0x88, 0x88,0x96, 0x66,0x66, 0x66,0x68, 0x88,0x88, 0x88,0x66, 0x66,0x88, 0x88,0x88, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x08, 0x88,0x88, 0x88,0x88, 0x88,0x00, 0x00,0x88, 0x88,0x90, 0x00,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x80, 0x00,0x88, 0x88,0x88, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x80,0x00, 0x00,0x88, 0x88,0x99, 0x99,0x88, 0x88,0x90, 0x08,0x88, 0x88,0x90, 0x00,0x00, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x00,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x88, 0x88,0x88, 0x88,0x00, 0x00,0x88, 0x89,0x90, 0x00,0x08, 0x88,0x80, 0x08,0x88, 0x88,0x90, 0x00,0x00, 0x88,0x88, 0x99,0x99, 0x88,0x88, 0x90,0x88, 0x88,0x99, 0x88,0x88, 0x88,0x90, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x80, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x89, 0x08,0x88, 0x88,0x90, 0x00,0x08, 0x88,0x89, 0x90,0x00, 0x08,0x88, 0x80,0x08, 0x88,0x90, 0x09,0x88, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x00, 0x88,0x89, 0x08,0x88, 0x89,0x90, 0x00,0x08, 0x88,0x99, 0x00,0x00, 0x08,0x88, 0x89,0x08, 0x88,0x90, 0x00,0x08, 0x88,0x89, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x89,0x99, 0x88,0x89, 0x08,0x88, 0x99,0x00, 0x00,0x00, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x90, 0x00,0x00, 0x00,0x88, 0x89,0x08, 0x88,0x90, 0x00,0x08, 0x88,0x89, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x99,0x00, 0x09,0x99, 0x08,0x88, 0x90,0x00, 0x00,0x00, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x90, 0x00,0x00, 0x00,0x88, 0x89,0x08, 0x88,0x90, 0x00,0x08, 0x88,0x89, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x90,0x00, 0x00,0x00, 0x08,0x88, 0x90,0x00, 0x00,0x00, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x90, 0x00,0x00, 0x00,0x88, 0x89,0x08, 0x88,0x90, 0x88,0x88, 0x88,0x89, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x90,0x00, 0x00,0x00, 0x08,0x88, 0x80,0x00, 0x00,0x08, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x80, 0x00,0x00, 0x00,0x88, 0x89,0x08, 0x88,0x88, 0x88,0x88, 0x88,0x99, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x90,0x00, 0x00,0x00, 0x08,0x88, 0x89,0x00, 0x00,0x88, 0x88,0x89, 0x08,0x88, 0x89,0x00, 0x00,0x08, 0x88,0x88, 0x00,0x00, 0x08,0x88, 0x89,0x08, 0x88,0x88, 0x88,0x88, 0x89,0x90, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x90,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x00, 0x08,0x88, 0x88,0x99, 0x08,0x88, 0x89,0x00, 0x00,0x00, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x89,0x88, 0x88,0x88, 0x88,0x99, 0x99,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x90,0x00, 0x00,0x00, 0x00,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x90, 0x08,0x88, 0x89,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x99,0x88, 0x88,0x88, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x00,0x88, 0x88,0x88, 0x88,0x88, 0x89,0x90, 0x08,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x89, 0x90,0x88, 0x88,0x98, 0x88,0x88, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x00, 0x00,0x00, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x99,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x99, 0x88,0x88, 0x88,0x99, 0x00,0x88, 0x88,0x90, 0x88,0x88, 0x80,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x89, 0x99,0x88, 0x88,0x99, 0x90,0x00, 0x08,0x88, 0x88,0x88, 0x88,0x88, 0x89,0x90, 0x09,0x99, 0x99,0x90, 0x00,0x88, 0x88,0x90, 0x08,0x88, 0x88,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x89, 0x00,0x09, 0x99,0x90, 0x00,0x00, 0x00,0x88, 0x88,0x88, 0x88,0x99, 0x99,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x90, 0x00,0x88, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x08, 0x88,0x88, 0x88,0x88, 0x88,0x99, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x09, 0x99,0x99, 0x99,0x90, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x90, 0x00,0x08, 0x88,0x89, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x98,0x88, 0x88,0x88, 0x99,0x90, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x08,0x88, 0x88,0x90, 0x00,0x00, 0x88,0x99, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x99, 0x99,0x99, 0x90,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x88, 0x89,0x90, 0x00,0x00, 0x09,0x90, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x09, 0x99,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x05,0x55, 0x55,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x55, 0x50,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x05,0x77, 0x75,0x55, 0x55,0x05, 0x55,0x05, 0x55,0x55, 0x55,0x55, 0x50,0x00, 0x00,0x57, 0x50,0x00, 0x55,0x50, 0x55,0x55, 0x05,0x55, 0x50,0x55, 0x55,0x00, 0x05,0x55, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x55,0x57, 0x55,0x75, 0x75,0x05, 0x75,0x05, 0x77,0x75, 0x57,0x77, 0x50,0x00, 0x00,0x57, 0x50,0x00, 0x57,0x50, 0x57,0x75, 0x05,0x77, 0x55,0x57, 0x75,0x05, 0x55,0x75, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x57,0x57, 0x55,0x75, 0x75,0x05, 0x75,0x05, 0x75,0x55, 0x57,0x77, 0x50,0x00, 0x00,0x57, 0x55,0x55, 0x57,0x50, 0x55,0x75, 0x55,0x57, 0x75,0x57, 0x55,0x05, 0x77,0x75, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x57,0x77, 0x55,0x57, 0x75,0x05, 0x75,0x05, 0x77,0x75, 0x57,0x75, 0x50,0x00, 0x00,0x57, 0x77,0x75, 0x57,0x50, 0x05,0x77, 0x55,0x77, 0x75,0x57, 0x50,0x05, 0x77,0x75, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x55,0x55, 0x50,0x55, 0x55,0x05, 0x55,0x05, 0x55,0x55, 0x55,0x55, 0x00,0x00, 0x00,0x55, 0x55,0x55, 0x55,0x50, 0x05,0x55, 0x55,0x55, 0x55,0x55, 0x50,0x05, 0x55,0x55, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00};
Image SquareN_seColor = Image(SquareN_seColorData);

const uint8_t gameLoopNumbersData[] = {8, 80, 1, 0, 1, 0xFF, 1, 0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x77,0x55, 0x55,0x55, 0x77,0x55, 0x55,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x55,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x55,0x55, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77};
Image gameLoopNumbers = Image(gameLoopNumbersData);

const uint8_t SquareNoseRightData[] = {10, 12, 1, 0, 1, 0x03, 1, 0x33, 0x00,0x00, 0x03,0x33, 0x30,0x04, 0x04,0x00, 0x33,0x00, 0x44,0x44, 0x40,0x00, 0x04,0x40, 0x40,0x40, 0x80,0x04, 0x44,0x44, 0x44,0x00, 0x04,0x44, 0x77,0x40, 0x03,0x00, 0x44,0x44, 0x00,0x33, 0x04,0x44, 0x44,0x40, 0x33,0x00, 0x44,0x44, 0x00,0x33, 0x30,0x40, 0x04,0x00, 0x33,0x30, 0x44,0x04, 0x40,0x33, 0x30,0x00, 0x00,0x00, 0x33};
Image SquareNoseRight = Image(SquareNoseRightData);

const uint8_t SquareNoseRunsRightData[] = {10, 12, 2, 0, 2, 0x03, 1, 0x33, 0x00,0x00, 0x03,0x33, 0x30,0x04, 0x04,0x00, 0x33,0x00, 0x44,0x44, 0x40,0x00, 0x04,0x40, 0x40,0x40, 0x80,0x04, 0x44,0x44, 0x44,0x00, 0x04,0x44, 0x77,0x40, 0x03,0x00, 0x44,0x44, 0x00,0x33, 0x04,0x44, 0x44,0x40, 0x33,0x00, 0x44,0x44, 0x00,0x03, 0x04,0x40, 0x04,0x44, 0x03,0x04, 0x00,0x00, 0x00,0x03, 0x00,0x03, 0x33,0x33, 0x33,0x33, 0x00,0x00, 0x03,0x33, 0x30,0x04, 0x04,0x00, 0x33,0x00, 0x44,0x44, 0x40,0x00, 0x04,0x40, 0x40,0x40, 0x80,0x04, 0x44,0x44, 0x44,0x00, 0x04,0x44, 0x77,0x40, 0x03,0x00, 0x44,0x44, 0x00,0x33, 0x04,0x44, 0x44,0x40, 0x33,0x00, 0x44,0x44, 0x00,0x33, 0x30,0x40, 0x04,0x00, 0x33,0x30, 0x44,0x04, 0x40,0x33, 0x30,0x00, 0x00,0x00, 0x33};
Image SquareNoseRunsRight = Image(SquareNoseRunsRightData);

const uint8_t SquareNoseLeftData[] = {10, 12, 1, 0, 1, 0x03, 1, 0x33, 0x30,0x00, 0x00,0x33, 0x33,0x00, 0x40,0x40, 0x03,0x00, 0x04,0x44, 0x44,0x00, 0x08,0x04, 0x04,0x04, 0x40,0x00, 0x44,0x44, 0x44,0x40, 0x30,0x04, 0x77,0x44, 0x40,0x33, 0x00,0x44, 0x44,0x00, 0x33,0x04, 0x44,0x44, 0x40,0x33, 0x00,0x44, 0x44,0x00, 0x33,0x00, 0x40,0x04, 0x03,0x33, 0x04,0x40, 0x44,0x03, 0x33,0x00, 0x00,0x00, 0x03};
Image SquareNoseLeft = Image(SquareNoseLeftData);

const uint8_t SquareNoseRunsLeftData[] = {10, 12, 2, 0, 2, 0x03, 1, 0x33, 0x30,0x00, 0x00,0x33, 0x33,0x00, 0x40,0x40, 0x03,0x00, 0x04,0x44, 0x44,0x00, 0x08,0x04, 0x04,0x04, 0x40,0x00, 0x44,0x44, 0x44,0x40, 0x30,0x04, 0x77,0x44, 0x40,0x33, 0x00,0x44, 0x44,0x00, 0x33,0x04, 0x44,0x44, 0x40,0x30, 0x00,0x44, 0x44,0x00, 0x30,0x44, 0x40,0x04, 0x40,0x30, 0x00,0x00, 0x00,0x40, 0x33,0x33, 0x33,0x30, 0x00,0x33, 0x30,0x00, 0x00,0x33, 0x33,0x00, 0x40,0x40, 0x03,0x00, 0x04,0x44, 0x44,0x00, 0x08,0x04, 0x04,0x04, 0x40,0x00, 0x44,0x44, 0x44,0x40, 0x30,0x04, 0x77,0x44, 0x40,0x33, 0x00,0x44, 0x44,0x00, 0x33,0x04, 0x44,0x44, 0x40,0x33, 0x00,0x44, 0x44,0x00, 0x33,0x00, 0x40,0x04, 0x03,0x33, 0x04,0x40, 0x44,0x03, 0x33,0x00, 0x00,0x00, 0x03};
Image SquareNoseRunsLeft = Image(SquareNoseRunsLeftData);

const uint8_t SN_ball_clockData[] = {10, 10, 4, 0, 1, 0x0E, 1, 0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x4f, 0x40,0x0e, 0x00,0x44, 0x44,0xf4, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x44, 0x44,0x44, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x4f, 0x40,0x00, 0x44,0x44, 0xf4,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x44, 0x44,0x44, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x4f,0x44, 0x44,0x00, 0xe0,0x04, 0xf4,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x4f, 0x44,0x44, 0x00,0x04, 0xf4,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee};
Image SN_ball_clock = Image(SN_ball_clockData);

const uint8_t SN_ball_counter_clockData[] = {10, 10, 4, 0, 1, 0x0E, 1, 0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0xf4, 0x40,0x0e, 0x00,0x4f, 0x44,0x44, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x44, 0x44,0x44, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0xf4, 0x44,0x44, 0x40,0x00, 0x4f,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x44, 0x44,0x44, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0xf4,0x00, 0xe0,0x04, 0x4f,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x44, 0x40,0x0e, 0x00,0x44, 0x44,0xf4, 0x00,0x04, 0x44,0x44, 0x4f,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee};
Image SN_ball_counter_clock = Image(SN_ball_counter_clockData);

const uint8_t SquareNoseBallData[] = {10, 10, 1, 0, 1, 0x0E, 1, 0xee, 0xe0,0x00, 0x0e,0xee, 0xee,0x00, 0x44,0x00, 0xee,0xe0, 0x04,0x4f, 0x40,0x0e, 0x00,0x44, 0x44,0xf4, 0x00,0x04, 0x44,0x44, 0x44,0x40, 0x04,0x44, 0x44,0x44, 0x40,0x00, 0x44,0x44, 0x44,0x00, 0xe0,0x04, 0x44,0x40, 0x0e,0xee, 0x00,0x44, 0x00,0xee, 0xee,0xe0, 0x00,0x0e, 0xee};
Image SquareNoseBall = Image(SquareNoseBallData);

const uint8_t SquareNoseElectricData[] = {10, 12, 2, 0, 2, 0x0E, 1, 0xee, 0x00,0x00, 0x00,0xee, 0xee,0x07, 0x00,0x70, 0xee,0xe0, 0x07,0x77, 0x70,0x0e, 0xe0,0x70, 0x77,0x07, 0x0e,0xe0, 0x77,0x77, 0x77,0x0e, 0xe0,0x77, 0x00,0x77, 0x0e,0xe0, 0x07,0x00, 0x70,0x0e, 0xe0,0x77, 0x77,0x77, 0x0e,0xe0, 0x07,0x77, 0x70,0x0e, 0xe0,0x07, 0x00,0x70, 0x0e,0xe0, 0x77,0x00, 0x77,0x0e, 0xe0,0x00, 0x00,0x00, 0x0e,0xee, 0x77,0x77, 0x77,0xee, 0xee,0x70, 0x77,0x07, 0xee,0xe7, 0x70,0x00, 0x07,0x7e, 0xe7,0x07, 0x00,0x70, 0x7e,0xe7, 0x00,0x00, 0x00,0x7e, 0xe7,0x00, 0x77,0x00, 0x7e,0xe7, 0x70,0x77, 0x07,0x7e, 0xe7,0x00, 0x00,0x00, 0x7e,0xe7, 0x70,0x00, 0x07,0x7e, 0xe7,0x70, 0x77,0x07, 0x7e,0xe7, 0x00,0x77, 0x00,0x7e, 0xe7,0x77, 0x77,0x77, 0x7e};
Image SquareNoseElectric = Image(SquareNoseElectricData);

const uint8_t meatyRingData[] = {8, 8, 4, 0, 3, 0x0E, 1, 0xee, 0x00,0x00, 0xee,0xe0, 0x0f,0xf0, 0x0e,0x00, 0xf0,0x0f, 0x00,0x0f, 0x00,0x00, 0xf0,0x0f, 0x00,0x00, 0xf0,0x00, 0xf0,0x0f, 0x00,0xe0, 0x0f,0xf0, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x00,0x00, 0xee,0xe0, 0x0f,0xf0, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0x0f,0xf0, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x00,0x00, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x0f,0xf0, 0xee,0xee, 0x00,0x00, 0xee,0xee, 0x00,0x00, 0xee,0xe0, 0x0f,0xf0, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0xf0,0x0f, 0x0e,0xe0, 0x0f,0xf0, 0x0e,0xee, 0x00,0x00, 0xee};
Image meatyRing = Image(meatyRingData);

const uint8_t birdRightData[] = {12, 8, 2, 0, 4, 0x0E, 1, 0xe0, 0x00,0x0e, 0xee,0xee, 0xee,0x00, 0x77,0x00, 0x00,0x00, 0xee,0x07, 0x66,0x70, 0x77,0x70, 0x0e,0x00, 0x76,0x67, 0x66,0x7a, 0x0e,0xe0, 0x07,0x66, 0x77,0x70, 0x0e,0xe0, 0x00,0x77, 0x00,0x00, 0xee,0xe0, 0x77,0x00, 0x0e,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0x00,0x00, 0xee,0xe0, 0x07,0x70, 0x77,0x70, 0x0e,0x00, 0x76,0x67, 0x66,0x7a, 0x0e,0x07, 0x77,0x66, 0x77,0x70, 0x0e,0x00, 0x00,0x77, 0x00,0x00, 0xee,0xe0, 0x77,0x00, 0x0e,0xee, 0xee,0xe0, 0x00,0x0e, 0xee,0xee, 0xee};
Image birdRight = Image(birdRightData);

const uint8_t birdLeftData[] = {12, 8, 2, 0, 4, 0x0E, 1, 0xee, 0xee,0xee, 0x00,0x00, 0xee,0xe0, 0x00,0x00, 0x07,0x70, 0x0e,0x00, 0x77,0x70, 0x76,0x67, 0x0e,0x0a, 0x76,0x67, 0x66,0x70, 0x0e,0x00, 0x77,0x76, 0x67,0x00, 0xee,0xe0, 0x00,0x07, 0x70,0x00, 0xee,0xee, 0xee,0x00, 0x07,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe0, 0x00,0x00, 0x00,0x0e, 0xee,0x00, 0x77,0x70, 0x77,0x00, 0xee,0x0a, 0x76,0x67, 0x66,0x70, 0x0e,0x00, 0x77,0x76, 0x67,0x77, 0x0e,0xe0, 0x00,0x07, 0x70,0x00, 0x0e,0xee, 0xee,0x00, 0x07,0x70, 0xee,0xee, 0xee,0xee, 0x00,0x00, 0xee};
Image birdLeft = Image(birdLeftData);

const uint8_t bugLeftData[] = {10, 7, 2, 0, 3, 0x0E, 1, 0xee, 0xe0,0x00, 0x00,0xee, 0x00,0x00, 0xcc,0xc0, 0x0e,0x0c, 0xcc,0xdd, 0xdc,0x0e, 0x0c,0x1c, 0xdd,0xdc, 0x0e,0x0c, 0xcc,0xcc, 0xcc,0x0e, 0x00,0xc0, 0x00,0xc0, 0x0e,0xe0, 0x00,0xe0, 0x00,0xee, 0xee,0xe0, 0x00,0x00, 0xee,0x00, 0x00,0xcc, 0xc0,0x0e, 0x0c,0xcc, 0xdd,0xdc, 0x0e,0x0c, 0x1c,0xdd, 0xdc,0x0e, 0x0c,0xcc, 0xcc,0xcc, 0x0e,0x00, 0x00,0xc0, 0x00,0x0e, 0xee,0xe0, 0x00,0xee, 0xee};
Image bugLeft = Image(bugLeftData);

const uint8_t bugRightData[] = {10, 7, 2, 0, 3, 0x0E, 1, 0xe0, 0x00,0x00, 0xee,0xee, 0x00,0xcc, 0xc0,0x00, 0x0e,0x0c, 0xdd,0xdc, 0xcc,0x0e, 0x0c,0xdd, 0xdc,0x1c, 0x0e,0x0c, 0xcc,0xcc, 0xcc,0x0e, 0x00,0xc0, 0x00,0xc0, 0x0e,0xe0, 0x00,0xe0, 0x00,0xee, 0xe0,0x00, 0x00,0xee, 0xee,0x00, 0xcc,0xc0, 0x00,0x0e, 0x0c,0xdd, 0xdc,0xcc, 0x0e,0x0c, 0xdd,0xdc, 0x1c,0x0e, 0x0c,0xcc, 0xcc,0xcc, 0x0e,0x00, 0x00,0xc0, 0x00,0x0e, 0xee,0xe0, 0x00,0xee, 0xee};
Image bugRight = Image(bugRightData);

const uint8_t frogGroundData[] = {12, 12, 1, 0, 1, 0x0C, 1, 0xcc, 0x00,0x00, 0x00,0x00, 0xcc,0xcc, 0x0b,0xb0, 0x0b,0xb0, 0xcc,0xc0, 0x0b,0x1b, 0xb1,0xb0, 0x0c,0xc0, 0xbb,0xbb, 0xbb,0xbb, 0x0c,0xc0, 0xbb,0xee, 0xee,0xbb, 0x0c,0xc0, 0xbb,0xbb, 0xbb,0xbb, 0x0c,0x00, 0x0b,0xbb, 0xbb,0xb0, 0x00,0x0b, 0xbb,0xb3, 0x3b,0xbb, 0xb0,0x0b, 0xb3,0xbb, 0xbb,0x3b, 0xb0,0x00, 0xbb,0x3b, 0xb3,0xbb, 0x00,0x0b, 0xbb,0xb0, 0x0b,0xbb, 0xb0,0x00, 0x00,0x00, 0x00,0x00, 0x00};
Image frogGround = Image(frogGroundData);

const uint8_t frogAirData[] = {12, 14, 1, 0, 1, 0x0C, 1, 0xcc, 0x00,0x00, 0x00,0x00, 0xcc,0xcc, 0x0b,0xb0, 0x0b,0xb0, 0xcc,0xc0, 0x0b,0x1b, 0xb1,0xb0, 0x0c,0xc0, 0xbb,0xbb, 0xbb,0xbb, 0x0c,0xc0, 0xbb,0xee, 0xee,0xbb, 0x0c,0xc0, 0xbb,0xee, 0xee,0xbb, 0x0c,0x00, 0x0b,0xbb, 0xbb,0xb0, 0x00,0x0b, 0xbb,0xb3, 0x3b,0xbb, 0xb0,0x00, 0x0b,0xbb, 0xbb,0xb0, 0x00,0xc0, 0xbb,0xbb, 0xbb,0xbb, 0x0c,0xc0, 0xbb,0xb0, 0x0b,0xbb, 0x0c,0x00, 0xbb,0x00, 0x00,0xbb, 0x00,0x0b, 0xbb,0x0c, 0xc0,0xbb, 0xb0,0x00, 0x00,0x0c, 0xc0,0x00, 0x00};
Image frogAir = Image(frogAirData);

const uint8_t SquiddyData[] = {10, 10, 1, 0, 1, 0x0E, 1, 0x00, 0x00,0x00, 0x00,0x00, 0x08,0x80, 0x88,0x08, 0x80,0x00, 0x88,0x77, 0x88,0x00, 0xe0,0x87, 0x00,0x78, 0x0e,0xe0, 0x88,0x77, 0x88,0x0e, 0xe0,0x08, 0x88,0x80, 0x0e,0xe0, 0x80,0x88, 0x08,0x0e, 0x00,0x80, 0x88,0x08, 0x00,0x08, 0x88,0x00, 0x88,0x80, 0x00,0x00, 0x00,0x00, 0x00};
Image Squiddy = Image(SquiddyData);

const uint8_t SquiddyBallData[] = {10, 10, 1, 0, 1, 0x0E, 1, 0xee, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x66,0x00, 0x0e,0xe0, 0x66,0x55, 0x66,0x0e, 0x00,0x65, 0x55,0x56, 0x00,0x06, 0x55,0x55, 0x55,0x60, 0x06,0x55, 0x55,0x55, 0x60,0x00, 0x65,0x55, 0x56,0x00, 0xe0,0x66, 0x55,0x66, 0x0e,0xe0, 0x00,0x66, 0x00,0x0e, 0xee,0xe0, 0x00,0x0e, 0xee};
Image SquiddyBall = Image(SquiddyBallData);

const uint8_t ATRUEPETData[] = {74, 18, 1, 0, 1, 0x00, 1, 0x77, 0x77,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x00,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x00, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x00, 0x77,0x00, 0x00,0x77, 0x77,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x00,0x77, 0x00,0x00, 0x77,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x00,0x77, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x00,0x00, 0x00,0x00, 0x77,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x00, 0x00,0x00, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x00,0x00, 0x00,0x77, 0x77,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x00,0x77, 0x00,0x00, 0x77,0x00, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x00, 0x00,0x00, 0x77,0x77, 0x77,0x00, 0x00,0x77, 0x00,0x77, 0x77,0x77, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x77,0x77, 0x77,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x77,0x77, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x00,0x00, 0x00,0x07, 0x00,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x07, 0x77,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x77,0x77, 0x00,0x00, 0x00,0x00, 0x07,0x00, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x00,0x70, 0x07,0x07, 0x07,0x07, 0x00,0x70, 0x07,0x00, 0x07,0x00, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x00,0x00, 0x00,0x07, 0x00,0x07, 0x77,0x07, 0x70,0x07, 0x07,0x07, 0x70,0x07, 0x77,0x00, 0x70,0x07, 0x07,0x07, 0x70,0x00, 0x70,0x07, 0x77,0x07, 0x77,0x77, 0x77,0x77, 0x00,0x77, 0x77,0x77, 0x77,0x77, 0x00,0x00, 0x00,0x00, 0x07,0x00, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x07,0x07, 0x00,0x70, 0x07,0x07, 0x07,0x07, 0x00,0x70, 0x07,0x00, 0x00,0x07, 0x77,0x77, 0x77,0x00, 0x77,0x77, 0x77,0x77, 0x77,0x00, 0x00,0x00, 0x00,0x07, 0x77,0x07, 0x07,0x07, 0x77,0x07, 0x77,0x07, 0x07,0x07, 0x07,0x00, 0x70,0x07, 0x77,0x07, 0x07,0x07, 0x77,0x07, 0x77,0x07, 0x77};
Image ATRUEPET = Image(ATRUEPETData);

const uint8_t openHandData[] = {22, 22, 1, 0, 1, 0x0D, 1, 0xd0, 0xff,0xff, 0xff,0xff, 0xff,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0x00,0xff, 0xff,0xff, 0xff,0xff, 0x00,0xdd, 0xdd,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0xf0, 0x0d,0xdd, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0xff, 0xff,0x00, 0xdd,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xf0,0x0d, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0x00,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xf0, 0x0d,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0x00, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0x00, 0x0f,0xff, 0xe0,0x0d, 0x0f,0xff, 0xff,0xff, 0xff,0xff, 0x0d,0x00, 0xff,0xee, 0x00,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0x0d, 0xd0,0x0f, 0xfe,0xe0, 0x0f,0xf0, 0xff,0x0f, 0xf0,0xff, 0x0d,0xdd, 0x00,0xff, 0x00,0x0f, 0xf0,0xff, 0x0f,0xf0, 0xff,0x0d, 0xdd,0xd0, 0x00,0x0d, 0x0f,0xf0, 0xff,0x0f, 0xf0,0xff, 0x0d,0xdd, 0xdd,0xdd, 0xdd,0x0f, 0xf0,0xff, 0x0f,0xf0, 0xff,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0x0f,0xf0, 0xff,0x0f, 0xf0,0xff, 0x0d,0xdd, 0xdd,0xdd, 0xdd,0x0f, 0xf0,0xff, 0x0f,0xf0, 0xff,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0x0e,0xe0, 0xff,0x0f, 0xf0,0xff, 0x0d,0xdd, 0xdd,0xdd, 0xdd,0x0e, 0xe0,0xee, 0x0f,0xf0, 0xee,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0x00,0x00, 0xee,0x0e, 0xe0,0xee, 0x0d,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xd0,0x00, 0x0e,0xe0, 0x00,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0x00, 0x00,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd};
Image openHand = Image(openHandData);

const uint8_t closedHandData[] = {22, 22, 1, 0, 1, 0x0D, 1, 0xd0, 0xff,0xff, 0xff,0xff, 0xff,0x0d, 0xdd,0xdd, 0xdd,0xdd, 0x00,0xff, 0xff,0xff, 0xff,0xff, 0x0d,0xdd, 0xdd,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0x00, 0xdd,0xdd, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0xff, 0xf0,0xdd, 0xdd,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xf0,0x00, 0x00,0xdd, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0x00, 0x44,0x40, 0x0d,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0x04,0x44, 0x44,0x00, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0x04, 0x44,0x04, 0x40,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0x04,0x74, 0x44,0x00, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0x04, 0x74,0x04, 0x40,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0x00,0x44, 0x44,0x00, 0xdd,0xdd, 0x0f,0xff, 0xff,0xff, 0xff,0xf0, 0x04,0x00, 0x0d,0xdd, 0xdd,0x0f, 0xff,0xff, 0xff,0xff, 0xff,0x00, 0x80,0xdd, 0xdd,0xdd, 0x0f,0xf0, 0xff,0x0f, 0xf0,0xff, 0xf0,0x00, 0xdd,0xdd, 0xdd,0x00, 0xff,0x0f, 0xf0,0xff, 0x0f,0xf0, 0xdd,0xdd, 0xdd,0xdd, 0xd0,0x00, 0x00,0x00, 0x00,0x00, 0x00,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd,0xdd, 0xdd};
Image closedHand = Image(closedHandData);

int gameState = 1;
int level = 0;
int gameLoop = 0;
int gameLoopNumbersY = -52;
int sentenceNumber = -1;

// timer
int frameCounter = 0;
int seconds = 0;
int minutes = 0;

// Square Nose
int SquareNoseX = 16;
int SquareNoseY = 28;
bool SquareNoseGoesRight = true;
bool SquareNoseIsJumping = false;
int SquareNoseJumpSpeed = 0;
int SquareNoseJumpCounter = 0;
bool electricShock = false;
int electricX = 0;
int electricY = 0;

// meaty ring
int meatyRingX = 52;
int meatyRingY = 8;
int collectedMeatyRings = 0;

// bird
int birdX = 18;
bool birdGoesRight = false;

// bug
int bugX = 54;
bool bugGoesRight = true;

// frog
int frogX = 50;
int frogY = 28;
bool frogGoesRight = true;
bool frogIsJumping = false;
int frogJumpSpeed = 0;
int frogJumpCounter = 0;

// Squiddy
int SquiddyX = 42;
int SquiddyY = 30;

int SquiddyBallX = 54;
int SquiddyBallY = 8;

int angle = 0;
bool SquiddySpins = false;

// doctor Meggan arm
bool endOfTest = false;
bool handGoesDown = true;
int handY = -22;

void setup() {
  gb.begin();
}

void loop() {
  while(!gb.update());
  gb.display.clear();

  switch (gameState) {
// title screen
    case 1:
      gameLoopNumbersY = (gameLoop * 8) - 52;
      gb.display.drawImage(GAME_LOOP_NUMBERS_X, gameLoopNumbersY, gameLoopNumbers);
      gb.display.drawImage(0, 0, SquareN_seColor);
      if(gb.buttons.pressed(BUTTON_A)) {
        gameState = 2;
      }
      break;

// game
    case 2:
      inputs();
      updates();
      outputs();
      break;

// victory
    case 3:
      gb.display.drawImage(3, 3, ATRUEPET);
// print a negative sentence
        gb.display.setCursorY(32);
        gb.display.setColor(GRAY);
        switch(sentenceNumber) {
          case 0:
            gb.display.print("\n\n\nYou failed to lose.\nGood!");
            break;
          case 1:
            gb.display.print("\n\n\n\nWhy did you do that?");
            break;
          case 2:
            gb.display.print("\nDo you know the joke\nabout the slave who\nthought he were\nfree?");
            break;
          case 3:
            gb.display.print("\n\n\nWho told you to do\nthat?");
            break;
          case 4:
            gb.display.print("\n\n\nHow do you know what\nis good or bad?");
            break;
          case 5:
            gb.display.print("\n\nDo you understand\nthe meaning of your\nactions?");
            break;
          case 6:
            gb.display.print("\n\n\nWhere does all of\nthis lead?");
            break;
          case 7:
            gb.display.print("\n\nDo you feel respon-\nsible for what is\njust happening?");
            break;
          case 8:
            gb.display.print("\n\n\nPut this and take a\nbook.");
            break;
          case 9:
            gb.display.print("\n\n\nDo you like losing\ntime?");
            break;
          case 10:
            gb.display.print("\n\nIs this comfort\nreally protecting\nyou?");
            break;
          case 11:
            gb.display.print("\n\nThink about the\npeople who have no\nfingers.");
            break;
          case 12:
            gb.display.print("\n\n\nIs this thing re-\nlated to real life?");
            break;
          case 13:
            gb.display.print("\n\n\n\nDo trees suffer?");
            break;
          case 14:
            gb.display.print("\n\nYou never learn from\nyour mistakes. Do\nyou?");
            break;
          case 15:
            gb.display.print("I can't love you, I\nam not human.");
            break;
          case 16:
            gb.display.print("\n\nAre you really\ndifferent from the\nothers?");
            break;
          case 17:
            gb.display.print("\n\n\nThis has not been\nwritten for you.");
            break;
        }

// got to next level or go back to title screen      
      if(gb.buttons.pressed(BUTTON_A)) {
        if(level == 3) {
          level = 0;
          gameLoop += 1;
          frameCounter = 0;
          seconds = 0;
          minutes = 0;
          gameState = 1;
          sentenceNumber = -1;
        } else {
          level += 1;
          gameState = 2;
          sentenceNumber = random(0, 18);
        }
      }
      break;
  }
}
